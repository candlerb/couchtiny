= CouchTiny

This library is a tiny CouchDB API inspired by CouchRest, aiming to be lean,
simple to understand, and closely aligned to CouchDB's own API. It also
provides pluggable interfaces for JSON parsing and HTTP client.

== Basic operation

  require 'couchtiny'
  db = CouchTiny::Database.url("http://127.0.0.1:5984/foo")
  db.create_database!

  doc = {"hello"=>"world"}
  db.put doc
  puts doc['_id']
  puts doc['_rev']

  puts db.get(doc['_id']).inspect

The majority of the API is on CouchTiny::Database, but there are also
server-level methods on CouchTiny::Server, e.g.

  db.server.stats
  db.server.restart!

If you are accessing multiple databases on the same server, it is more
efficient to share a Server object between them.

  require 'couchtiny'
  serv = CouchTiny::Server.new :url=>"http://127.0.0.1:5984"
  db1 = CouchTiny::Database.new(serv, "foo")
  db2 = CouchTiny::Database.new(serv, "bar")
  ... etc

== JSON parser plugin example

Assuming you have an object which implements .parse and .unparse methods,
you can hook it in like this:

  db = CouchTiny::Database.url("http://127.0.0.1:5984/testdb",
         :parser => CouchTiny::Parser::JSObject)
  doc = db.get("12345")
  puts doc.foo

Here, the JSObject parser makes hashes behave like Javascript objects - that
is, you can access them as doc.foo or doc['foo'] equally.

Such options can also be set globally:

  CouchTiny::Server.options[:parser] = CouchTiny::Parser::JSObject

== Dependencies

CouchTiny depends on the 'json' package, and also currently 'restclient'
although I intend at some stage to have a direct Net::HTTP client which also
supports persistent HTTP/1.1 connections and better exception handling (in
particular, a hook to parse the exception messages which CouchDB returns in
JSON format in the response body)

== No ORM

CouchTiny has no built-in 'ORM', and if I ever write one, it will be
released as a separate add-on.

I am working on the basis that having the ability to parse into a
Javascript-like object removes much of the need for an ORM, in the same way
that Javascript code doesn't seem to need one.

I may change my mind in future if I find I am writing lots of code to
validate parameters, or convert between strings and other Ruby object
classes like Date/Time.

== Author

Brian Candler (B dot Candler at pobox.com dot com)

= Validation

CouchTiny provides no particular way of doing validations; it is up to
you to choose how to do this.

== Using Exceptions

One possibility is to put your validations into the before_save hook in your
model, and to raise an exception there.

This should allow you in future to move your validations down into CouchDB
itself (using the validate_doc_update function in a design doc)

=== lib/validation.rb

    class ValidationError < ArgumentError; end

=== app/models/foo.rb

    require 'validation'
    class Foo < CouchTiny::Document
      auto_accessor
    
      def before_save
        raise ValidationError, "Missing field: Name must be provided" if name.blank?
        raise ValidationError, "Invalid data: Name must contain a-z 0-9 and space only" if name !~ /\A[a-z0-9 ]+\z/i
      end
    end

=== app/controllers/foos_controller.rb

    class FoosController < ApplicationController
      def index
        @foos = Foo.all
      end

      def show
        fetch || return
        respond_to do |format|
          format.html
          format.json { render :text => JSON::pretty_generate(@foo) }
        end
      end

      def new
        @foo = Foo.new
      end
      
      def create
        with_validation(:new) do
          @foo = Foo.new(params[:foo])
          @foo.save!
          flash[:success] = "Foo created"
          redirect_to @foo
        end
      end

      def edit
        fetch || return
      end
      
      def update
        with_validation(:edit) do
          fetch || return
          @foo.update params[:foo]
          @foo.save!
          flash[:success] = "Changes saved"
          redirect_to @foo
        end
      end
      
      def destroy
        with_validation(:show) do
          fetch || return
          @foo.destroy
          flash[:notice] = "Foo destroyed"
          redirect_to :action=>:index
        end
      end

    private
      def fetch(id = params[:id])
        @foo = Foo.get(id)
        unless Foo == @foo.class
          flash[:error] = "Bad object type #{@foo.class}"
          redirect_to :action=>:index
          @foo = nil
          return
        end
        return @foo
      rescue RestClient::ResourceNotFound
        flash[:error] = "Unknown object"
        redirect_to :action=>:index
        @foo = nil
        return
      end
    end

=== app/controllers/application_controller.rb

    require 'validation'
    class ApplicationController < ActionController::Base
      ...
    private
      # On create and update, handle exceptions raised in model and from CouchDB.
      def with_validation(render_action, conflict_message = nil)
        yield
      rescue ValidationError => e
        flash.now[:error] = e.message
        render :action=>render_action
      rescue RestClient::Unauthorized
        # Exception thrown from validate_doc_update, see
        # http://wiki.apache.org/couchdb/Security_Features_Overview
        flash.now[:error] = e.message.gsub(/\A\d{3} /,'')
        render :action=>render_action
      rescue RestClient::RequestFailed => e
        case e.response
        when Net::HTTPConflict
          flash.now[:error] = conflict_message || "Changes not saved due to concurrent updates, please try again"
        else
          flash.now[:error] = "Save failed: #{e.message.inspect}"
        end
        render :action=>render_action
      end
    end

=== config/routes.rb

    ...
    map.resources :foos
    ...
